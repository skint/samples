#!/usr/bin/env python
# coding: utf8
# vim: ft=python

__author__ = 'breaker <breaker@broken.su>'

from twisted.internet.protocol import Protocol, ClientFactory
from twisted.internet.abstract import isIPAddress
from twisted.internet import reactor
from sys import argv
from signal import *
from proto import packet

class FlashlightClientProtocol(Protocol):
    def dataReceived(self, data):
        try:
            p = packet.parse(data)
            if p.cmd == "ON":
                print "Powered ON"
            elif p.cmd == "OFF":
                print "Powered OFF"
            elif p.cmd == "COLOR":
                print "Set color to %s" % p.payload.color
            else:
                # raise Exception
                pass
        except:
            pass

    def connectionMade(self):
        print "Connected."

class FlashlightFactory(ClientFactory):

    def startedConnecting(self, connector):
        print 'Twisted client started.'

    def buildProtocol(self, addr):
        print 'Connected to %s.' % addr.host
        return FlashlightClientProtocol()

    def clientConnectionLost(self, connector, reason):
        print "Server gone away"
        try:
            reactor.stop()
        except:
            pass

    def clientConnectionFailed(self, connector, reason):
        print reason.value.message
        reactor.stop()

if __name__ == '__main__':
    if len(argv) > 1 and isIPAddress(argv[1]):
        addr = argv[1]
    else:
        addr = "127.0.0.1"

    def stopHandler(signum, stackframe):
        print "\nFlashlight shutdown"
        reactor.stop()

    signal(SIGINT, stopHandler)

    reactor.connectTCP(addr, 9999, FlashlightFactory())
    reactor.run()
